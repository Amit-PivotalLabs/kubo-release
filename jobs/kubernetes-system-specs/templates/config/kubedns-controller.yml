# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  # replicas: not specified here:
  # 1. In order to make Addon Manager do not reconcile this replicas parameter.
  # 2. Default is 1.
  # 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.
  strategy:
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 0
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      volumes:
      - name: kube-dns-config
        hostPath:
          path: "/var/vcap/jobs/kubeconfig/config/"
      containers:
      - name: kubedns
        env:
        - name: http_proxy
          value: 10.0.252.2:8888
        - name: https_proxy
          value: 10.0.252.2:8888
        - name: HTTP_PROXY
          value: 10.0.252.2:8888
        - name: HTTPS_PROXY
          value: 10.0.252.2:8888
        - name: no_proxy
          value: 10.200.0.0,10.200.0.1,10.200.0.2,10.200.0.3,10.200.0.4,10.200.0.5,10.200.0.6,10.200.0.7,10.200.0.8,10.200.0.9,10.200.0.10,10.200.0.11,10.200.0.12,10.200.0.13,10.200.0.14,10.200.0.15,10.200.0.16,10.200.0.17,10.200.0.18,10.200.0.19,10.200.0.20,10.200.0.21,10.200.0.22,10.200.0.23,10.200.0.24,10.200.0.25,10.200.0.26,10.200.0.27,10.200.0.28,10.200.0.29,10.200.0.30,10.200.0.31,10.200.0.32,10.200.0.33,10.200.0.34,10.200.0.35,10.200.0.36,10.200.0.37,10.200.0.38,10.200.0.39,10.200.0.40,10.200.0.41,10.200.0.42,10.200.0.43,10.200.0.44,10.200.0.45,10.200.0.46,10.200.0.47,10.200.0.48,10.200.0.49,10.200.0.50,10.200.0.51,10.200.0.52,10.200.0.53,10.200.0.54,10.200.0.55,10.200.0.56,10.200.0.57,10.200.0.58,10.200.0.59,10.200.0.60,10.200.0.61,10.200.0.62,10.200.0.63
        - name: NO_PROXY
          value: 10.200.0.0,10.200.0.1,10.200.0.2,10.200.0.3,10.200.0.4,10.200.0.5,10.200.0.6,10.200.0.7,10.200.0.8,10.200.0.9,10.200.0.10,10.200.0.11,10.200.0.12,10.200.0.13,10.200.0.14,10.200.0.15,10.200.0.16,10.200.0.17,10.200.0.18,10.200.0.19,10.200.0.20,10.200.0.21,10.200.0.22,10.200.0.23,10.200.0.24,10.200.0.25,10.200.0.26,10.200.0.27,10.200.0.28,10.200.0.29,10.200.0.30,10.200.0.31,10.200.0.32,10.200.0.33,10.200.0.34,10.200.0.35,10.200.0.36,10.200.0.37,10.200.0.38,10.200.0.39,10.200.0.40,10.200.0.41,10.200.0.42,10.200.0.43,10.200.0.44,10.200.0.45,10.200.0.46,10.200.0.47,10.200.0.48,10.200.0.49,10.200.0.50,10.200.0.51,10.200.0.52,10.200.0.53,10.200.0.54,10.200.0.55,10.200.0.56,10.200.0.57,10.200.0.58,10.200.0.59,10.200.0.60,10.200.0.61,10.200.0.62,10.200.0.63
        image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.1
        imagePullPolicy: IfNotPresent
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        livenessProbe:
          httpGet:
            path: /healthcheck/kubedns
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8081
            scheme: HTTP
          # we poll on pod startup for the Kubernetes master service and
          # only setup the /readiness HTTP server once that's available.
          initialDelaySeconds: 3
          timeoutSeconds: 5
        args:
        - --domain=cluster.local.
        - --dns-port=10053
        - --kubecfg-file=/var/vcap/jobs/kubeconfig/config/kubeconfig
        - --config-dir=/var/vcap/jobs/kubeconfig/config
        - --v=2
        ports:
        - containerPort: 10053
          name: dns-local
          protocol: UDP
        - containerPort: 10053
          name: dns-tcp-local
          protocol: TCP
        volumeMounts:
        - name: kube-dns-config
          mountPath: /var/vcap/jobs/kubeconfig/config/
      - name: dnsmasq
        image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthcheck/dnsmasq
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        args:
        - -v=2
        - -logtostderr
        - -configDir=/etc/k8s/dns/dnsmasq-nanny
        - -restartDnsmasq=true
        - --
        - -k
        - --cache-size=1000
        - --no-resolv
        - --server=127.0.0.1#10053
        - --log-facility=-
        - --server=/cluster.local/127.0.0.1#10053
        - --server=/in-addr.arpa/127.0.0.1#10053
        - --server=/ip6.arpa/127.0.0.1#10053
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        # see: https://github.com/kubernetes/kubernetes/issues/29055 for details
        resources:
          requests:
            cpu: 150m
            memory: 20Mi
        volumeMounts:
        - name: kube-dns-config
          mountPath: /etc/k8s/dns/dnsmasq-nanny
      - name: sidecar
        image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.1
        livenessProbe:
          httpGet:
            path: /metrics
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        args:
        - --v=2
        - --logtostderr
        - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
        - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
        ports:
        - containerPort: 10054
          name: metrics
          protocol: TCP
        resources:
          requests:
            memory: 20Mi
            cpu: 10m
      dnsPolicy: Default  # Don't use cluster DNS. We want DNS resolved by worker node for now to be able to access cluster instances.
